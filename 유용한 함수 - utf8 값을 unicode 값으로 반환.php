<?php

function ord8($c) {
    $len = strlen($c);
    if ($len <= 0) return false;

    $h = ord($c[0]);
    if ($h <= 0x7F) return $h; // 첫 번째 바이트가 0x7F 보다 작거나 같으면 한글이 아님

    // 첫 번째 바이트가 0xE0 이상 0xEF 이하인지 확인합니다.
    if ($h < 0xE0 || $h > 0xEF) return false;

    // 한글 문자의 두 번째와 세 번째 바이트를 가져옵니다.
    $b2 = ord($c[1]);
    $b3 = ord($c[2]);

    // 두 번째와 세 번째 바이트가 0x80 이상 0xBF 이하인지 확인합니다.
    if ($b2 < 0x80 || $b2 > 0xBF || $b3 < 0x80 || $b3 > 0xBF) return false;

    // 한글 유니코드 값을 계산합니다.
    return (($h & 0xF) << 12) | (($b2 & 0x3F) << 6) | ($b3 & 0x3F);
}

/*
위의 함수는 UTF-8 인코딩된 문자열의 첫 번째 문자가 한글인 경우에, 그 문자를 구성하는 3바이트 중 두 번째와 세 번째 바이트로부터 해당 문자의 유니코드 값을 계산해 반환하는 함수입니다.

UTF-8은 가변 길이 문자 인코딩 방식으로, 1바이트에서 4바이트까지 다양한 길이의 바이트로 문자를 표현합니다. 한글은 UTF-8에서 3바이트로 표현되며, 이를 구성하는 세 바이트는 각각 다음과 같은 비트 패턴을 가집니다.

첫 번째 바이트: 1110xxxx
두 번째 바이트: 10xxxxxx
세 번째 바이트: 10xxxxxx
여기서 xxxx는 해당 문자의 코드 포인트를 나타내는 비트 패턴입니다. 이 함수는 첫 번째 바이트로부터 해당 문자의 코드 포인트를 추출한 뒤, 이를 이용해 두 번째와 세 번째 바이트에서 나머지 비트를 추출하고, 이들을 조합해 해당 문자의 유니코드 값을 계산해 반환합니다.

ord 함수는 인자로 전달된 문자열에서 첫 번째 문자의 ASCII 코드 값을 반환합니다. 이 함수는 이를 이용해, UTF-8 인코딩된 문자열의 첫 번째 바이트가 0x7F보다 작은 경우, 즉 ASCII 문자인 경우에는 해당 문자의 ASCII 코드 값을 반환하도록 합니다.
*/